// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: student_service/services.proto

package student

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("student_service/services.proto", fileDescriptor_7418f639bce3972d) }

var fileDescriptor_7418f639bce3972d = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x2e, 0x29, 0x4d,
	0x49, 0xcd, 0x2b, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x87, 0xd2, 0xc5, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0x79, 0x29, 0x59, 0x0c, 0x85, 0x10, 0x3e, 0x44,
	0x9d, 0xd1, 0x01, 0x26, 0x2e, 0xbe, 0x60, 0x88, 0x48, 0x30, 0x44, 0x81, 0x90, 0x2b, 0x17, 0xaf,
	0x73, 0x51, 0x6a, 0x62, 0x49, 0x2a, 0x54, 0x5c, 0x48, 0x52, 0x0f, 0xa6, 0x07, 0x45, 0x3c, 0x28,
	0xb5, 0x50, 0x0a, 0xa7, 0x54, 0xb1, 0x90, 0x31, 0x17, 0x97, 0x7b, 0x6a, 0x09, 0xcc, 0x0c, 0x5e,
	0xb8, 0x42, 0xa7, 0x4a, 0xcf, 0x14, 0x29, 0x31, 0x38, 0x17, 0xa1, 0x06, 0xa4, 0xc9, 0x86, 0x8b,
	0x37, 0xb4, 0x20, 0x05, 0xab, 0xdd, 0x28, 0xe2, 0x20, 0xbb, 0x05, 0xe0, 0x52, 0xc1, 0xa5, 0xc9,
	0xc9, 0xa9, 0xc5, 0xc5, 0x42, 0x06, 0x5c, 0xbc, 0x2e, 0xa9, 0x39, 0xa9, 0x08, 0xdd, 0x68, 0xb6,
	0x62, 0xea, 0x70, 0xe2, 0xe2, 0xf1, 0xc9, 0x2c, 0x86, 0xb9, 0xa0, 0x58, 0x48, 0x02, 0xae, 0x02,
	0x59, 0x18, 0x64, 0x1b, 0x2e, 0x99, 0x62, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0xd8, 0x1a, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x45, 0x86, 0x4b, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentServiceClient interface {
	CreateStudent(ctx context.Context, in *CreateStudentReq, opts ...grpc.CallOption) (*CreateStudentRes, error)
	GetStudent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*GetStudentRes, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentReq, opts ...grpc.CallOption) (*Success, error)
	DeleteStudent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Success, error)
	ListStudents(ctx context.Context, in *ListStudentsReq, opts ...grpc.CallOption) (*ListStudentsRes, error)
}

type studentServiceClient struct {
	cc *grpc.ClientConn
}

func NewStudentServiceClient(cc *grpc.ClientConn) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) CreateStudent(ctx context.Context, in *CreateStudentReq, opts ...grpc.CallOption) (*CreateStudentRes, error) {
	out := new(CreateStudentRes)
	err := c.cc.Invoke(ctx, "/student.StudentService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*GetStudentRes, error) {
	out := new(GetStudentRes)
	err := c.cc.Invoke(ctx, "/student.StudentService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) UpdateStudent(ctx context.Context, in *UpdateStudentReq, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/student.StudentService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) DeleteStudent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/student.StudentService/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) ListStudents(ctx context.Context, in *ListStudentsReq, opts ...grpc.CallOption) (*ListStudentsRes, error) {
	out := new(ListStudentsRes)
	err := c.cc.Invoke(ctx, "/student.StudentService/ListStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
type StudentServiceServer interface {
	CreateStudent(context.Context, *CreateStudentReq) (*CreateStudentRes, error)
	GetStudent(context.Context, *ById) (*GetStudentRes, error)
	UpdateStudent(context.Context, *UpdateStudentReq) (*Success, error)
	DeleteStudent(context.Context, *ById) (*Success, error)
	ListStudents(context.Context, *ListStudentsReq) (*ListStudentsRes, error)
}

// UnimplementedStudentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (*UnimplementedStudentServiceServer) CreateStudent(ctx context.Context, req *CreateStudentReq) (*CreateStudentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (*UnimplementedStudentServiceServer) GetStudent(ctx context.Context, req *ById) (*GetStudentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (*UnimplementedStudentServiceServer) UpdateStudent(ctx context.Context, req *UpdateStudentReq) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (*UnimplementedStudentServiceServer) DeleteStudent(ctx context.Context, req *ById) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (*UnimplementedStudentServiceServer) ListStudents(ctx context.Context, req *ListStudentsReq) (*ListStudentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudents not implemented")
}

func RegisterStudentServiceServer(s *grpc.Server, srv StudentServiceServer) {
	s.RegisterService(&_StudentService_serviceDesc, srv)
}

func _StudentService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).CreateStudent(ctx, req.(*CreateStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudent(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).UpdateStudent(ctx, req.(*UpdateStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).DeleteStudent(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ListStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ListStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/ListStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ListStudents(ctx, req.(*ListStudentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _StudentService_CreateStudent_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _StudentService_GetStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _StudentService_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _StudentService_DeleteStudent_Handler,
		},
		{
			MethodName: "ListStudents",
			Handler:    _StudentService_ListStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student_service/services.proto",
}
